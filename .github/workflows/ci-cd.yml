name: AWS CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Temporarily commented out running tests locally
      # - name: Run tests locally
      #   env:
      #     DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #   run: pytest


      - name: Build Docker image
        run: docker build -t diet-fitness-app:latest .

      # Temporarily commented out running tests inside docker
      #- name: Run tests inside Docker
        #run: docker run --rm --network host -e DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db" -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" diet-fitness-app:latest pytest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: diet-fitness-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Install AWS EB CLI
        run: |
          pip install awsebcli

      - name: Update Dockerrun.aws.json
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: diet-fitness-app
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Replace placeholders in Dockerrun.aws.json
          sed -i "s|ACCOUNT_ID.dkr.ecr.REGION.amazonaws.com|$ECR_REGISTRY|g" Dockerrun.aws.json
          sed -i "s|diet-fitness-app:latest|$ECR_REPOSITORY:${{ github.sha }}|g" Dockerrun.aws.json
          sed -i "s|PLACEHOLDER_DATABASE_URL|$DATABASE_URL|g" Dockerrun.aws.json
          sed -i "s|PLACEHOLDER_OPENAI_API_KEY|$OPENAI_API_KEY|g" Dockerrun.aws.json

      
      - name: Deploy to Elastic Beanstalk
        env:
          EB_APP_NAME: diet-fitness-app
          EB_ENV_NAME: production-environment
        run: |
          eb init $EB_APP_NAME --platform docker --region ${{ secrets.AWS_REGION }}
          eb create --cfg default --timeout 20 $EB_ENV_NAME || echo "Env already exists"
          eb deploy $EB_ENV_NAME --staged

